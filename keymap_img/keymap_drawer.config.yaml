draw_config:
  append_colon_to_layer_header: true
  arc_radius: 6.0
  arc_scale: 1.0
  combo_h: 26.0
  combo_w: 28.0
  inner_pad_h: 2.0
  inner_pad_w: 2.0
  key_h: 56.0
  key_rx: 6.0
  key_ry: 6.0
  key_w: 60.0
  line_spacing: 1.2
  outer_pad_h: 56.0
  outer_pad_w: 30.0
  small_pad: 2.0
  split_gap: 30.0
  dark_mode: false
  n_columns: 2
  svg_style: |
    /* font and background color specifications */
    svg {
        font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
        font-size: 14px;
        font-kerning: normal;
        text-rendering: optimizeLegibility;
        fill: #24292e;
    }

    /* default key styling */
    rect {
        fill: #f6f8fa;
        stroke: #c9cccf;
        stroke-width: 1;
    }

    /* color accent for combo boxes */
    rect.combo {
        fill: #cdf;
    }

    /* color accent for held keys */
    rect.held, rect.combo.held {
        fill: #fdd;
    }

    /* color accent for ghost (optional) keys */
    rect.ghost, rect.combo.ghost {
        fill: #ddd;
    }

    text {
        text-anchor: middle;
        dominant-baseline: middle;
    }

    /* styling for layer labels */
    text.label {
        font-weight: bold;
        text-anchor: start;
        stroke: white;
        stroke-width: 2;
        paint-order: stroke;
    }

    /* styling for combo tap, and key hold/shifted label text */
    text.combo, text.hold, text.shifted {
        font-size: 11px;
    }

    text.hold {
        text-anchor: middle;
        dominant-baseline: auto;
    }

    text.shifted {
        text-anchor: middle;
        dominant-baseline: hanging;
    }

    /* styling for hold/shifted label text in combo box */
    text.combo.hold, text.combo.shifted {
        font-size: 8px;
    }

    /* styling for combo dendrons */
    path {
        stroke-width: 1;
        stroke: gray;
        fill: none;
    }
parse_config:
  zmk_additional_includes: ["zmk-helpers/include"]
  assign_combos_to_layers: false
  preprocess: true
  qmk_keycode_map:
    AMPERSAND: '&'
    AMPR: '&'
    ASTERISK: '*'
    ASTR: '*'
    AT: '@'
    BACKSLASH: \
    BSLS: \
    CIRC: ^
    CIRCUMFLEX: ^
    COLN: ':'
    COLON: ':'
    COMM: ','
    COMMA: ','
    DLR: $
    DOLLAR: $
    DOT: .
    DOUBLE_QUOTE: '"'
    DQT: '"'
    DQUO: '"'
    EQL: '='
    EQUAL: '='
    EXCLAIM: '!'
    EXLM: '!'
    GRAVE: '`'
    GRV: '`'
    GT: '>'
    HASH: '#'
    LABK: <
    LBRC: '['
    LCBR: '{'
    LEFT_ANGLE_BRACKET: <
    LEFT_BRACKET: '['
    LEFT_CURLY_BRACE: '{'
    LEFT_PAREN: (
    LPRN: (
    LT: <
    MINS: '-'
    MINUS: '-'
    'NO': ''
    NONUS_HASH: '#'
    NUHS: '#'
    PERC: '%'
    PERCENT: '%'
    PIPE: '|'
    PLUS: +
    QUES: '?'
    QUESTION: '?'
    QUOT: ''''
    QUOTE: ''''
    RABK: '>'
    RBRC: ']'
    RCBR: '}'
    RIGHT_ANGLE_BRACKET: '>'
    RIGHT_BRACKET: ']'
    RIGHT_CURLY_BRACE: '}'
    RIGHT_PAREN: )
    RPRN: )
    SCLN: ;
    SEMICOLON: ;
    SLASH: /
    SLSH: /
    TILD: '~'
    TILDE: '~'
    TRANSPARENT: ''
    TRNS: ''
    UNDERSCORE: _
    UNDS: _
    SPACE: ⎵
  raw_binding_map:
    "&bootloader": { t: Boot, h: $$mdi:progress-download$$ }
    "&caps_word": { t: Caps Word, h: $$mdi:apple-keyboard-caps$$ }
    "&studio_unlock": { t: ZMK Studio, h: $$mdi:lock-open-variant$$ }

    "&kp UP": $$mdi:arrow-up$$
    "&kp DOWN": $$mdi:arrow-down$$
    "&kp LEFT": $$mdi:arrow-left$$
    "&kp RIGHT": $$mdi:arrow-right$$

    "&kp C_STOP": $$mdi:stop$$
    "&kp C_PP": $$mdi:play-pause$$
    "&kp C_PREV": $$mdi:skip-previous$$
    "&kp C_NEXT": $$mdi:skip-next$$
    "&kp C_VOL_DN": $$mdi:volume-minus$$
    "&kp C_VOL_UP": $$mdi:volume-plus$$
    "&kp C_MUTE": $$mdi:volume-mute$$

    "&mmv MOVE_UP": Mouse Up
    "&mmv MOVE_DOWN": Mouse Down
    "&mmv MOVE_LEFT": Mouse Left
    "&mmv MOVE_RIGHT": Mouse Right

    "&msc SCRL_UP": { t: Scroll Up, h: $$mdi:pan-up$$}
    "&msc SCRL_DOWN": { t: Scroll Down, h: $$mdi:pan-down$$}
    "&msc SCRL_LEFT": { t: Scroll Left, h: $$mdi:pan-left$$}
    "&msc SCRL_RIGHT": { t: Scroll Right, h: $$mdi:pan-right$$}

    "&mkp RCLK": Right Click
    "&mkp LCLK": Left Click
    "&mkp MCLK": Middle Click
    "&mkp MB4": { t: Back, h: $$mdi:backburger$$ }
    "&mkp MB5": { t: Forward, h: $$mdi:forwardburger$$ }

    "&kp LG(C)": { t: Copy, h: $$mdi:content-copy$$ }
    "&kp LG(V)": { t: Paste, h: $$mdi:content-paste$$ }
    "&kp LG(X)": { t: Cut, h: $$mdi:content-cut$$ }
    "&kp LG(Z)": { t: Undo, h: $$mdi:undo$$ }
    "&kp LG(LS(Z))": { t: Redo, h: $$mdi:redo$$ }

    "&kp LGUI": { t: LGUI, h: $$mdi:apple-keyboard-command$$ }
    "&kp LALT": { t: LALT, h: $$mdi:apple-keyboard-option$$ }
    "&kp LCTRL": { t: LCTRL, h: $$mdi:apple-keyboard-control$$ }
    "&kp LSHFT": { t: LSHFT, h: $$mdi:apple-keyboard-shift$$ }
    "&kp RGUI": { t: RGUI, h: $$mdi:apple-keyboard-command$$ }
    "&kp RALT": { t: RALT, h: $$mdi:apple-keyboard-option$$ }
    "&kp RCTRL": { t: RCTRL, h: $$mdi:apple-keyboard-control$$ }
    "&kp RSHFT": { t: RSHFT, h: $$mdi:apple-keyboard-shift$$ }
  skip_binding_parsing: false
  zmk_keycode_map:
    AMPERSAND: '&'
    AMPS: '&'
    APOS: {t: "'", s: '"'}
    APOSTROPHE: <
    ASTERISK: '*'
    ASTRK: '*'
    AT: '@'
    AT_SIGN: '@'
    BACKSLASH: {t: '\', s: '|'}
    BSLH: \
    CARET: ^
    COLON: ':'
    COMMA: {t: ',', s: '<'}
    DLLR: $
    DOLLAR: $
    DOT: {t: '.', s: '>'}
    DOUBLE_QUOTES: '"'
    DQT: '"'
    EQUAL: {t: '=', s: '+'}
    EXCL: '!'
    EXCLAMATION: '!'
    FSLH: /
    GRAVE: {t: '`', s: '~'}
    GREATER_THAN: '>'
    GT: '>'
    HASH: '#'
    LBKT: {t: '[', s: '{'}
    LBRC: '{'
    LEFT_BRACE: '{'
    LEFT_BRACKET: '['
    LEFT_PARENTHESIS: (
    LESS_THAN: <
    LPAR: (
    LT: <
    MINUS: {t: '-', s: '_'}
    NON_US_BACKSLASH: \
    NON_US_BSLH: '|'
    NON_US_HASH: '#'
    NUHS: '#'
    PERCENT: '%'
    PERIOD: .
    PIPE: '|'
    PIPE2: '|'
    PLUS: +
    POUND: '#'
    PRCNT: '%'
    QMARK: '?'
    QUESTION: '?'
    RBKT: {t: ']', s: '}'}
    RBRC: '}'
    RIGHT_BRACE: '}'
    RIGHT_BRACKET: ']'
    RIGHT_PARENTHESIS: )
    RPAR: )
    SEMI: {t: ';', s: ':'}
    SEMICOLON:  {t: ';', s: ':'}
    SINGLE_QUOTE:  {t: '''', s: '"'}
    SLASH: {t: '/', s: '?'}
    SQT: ''''
    STAR: '*'
    TILDE: '~'
    TILDE2: '~'
    UNDER: _
    UNDERSCORE: _
    LCTRL: ⌃
    LALT: ⎇
    LGUI: ⌘
    LSHFT: ⇧
    RCTRL: ⌃
    LEFT_CONTROL: ⌃
    LEFT_ALT: ⎇
    LEFT_GUI: ⌘
    LEFT_SHIFT: ⇧
    RALT: ⎇
    RGUI: ⌘
    RSHFT: ⇧
    RIGHT_CONTROL: ⌃
    RIGHT_ALT: ⎇
    RIGHT_GUI: ⌘
    RIGHT_SHIFT: ⇧
    LEFT: ←
    RIGHT: →
    UP: ↑
    DOWN: ↓
    TAB: ↹
    RETURN: '⏎'
    ESCAPE: '⎋'
    C_REWIND: '⏮'
    C_FAST_FORWARD: '⏭'
    C_PAUSE: '⏯'
    C_MUTE: "VOL\nMUTE"
    C_VOLUME_DOWN: "VOL\nDOWN"
    C_VOLUME_UP: "VOL\nUP"
    C_BRIGHTNESS_DEC: '☀↓'
    C_BRIGHTNESS_INC: '☀↑'
    LA(LEFT): ↞
    LA(RIGHT): ↠
    LG(LEFT): ⇤
    LG(RIGHT): ⇥
    'LS(LC(LG(LALT)))': 'HYPER'
    'RS(RC(RG(RALT)))': 'HYPER'
    'LC(LG(LALT))': 'MEH'
    'RC(RG(RALT))': 'MEH'
    'LG(Q)': '⌘Q'
    'LG(W)': '⌘W'
    'LG(GRAVE)': '⌘`'
    'LG(Z)': '⌘Z'
    'LG(X)': '⌘X'
    'LG(C)': '⌘C'
    'LG(V)': '⌘V'
    'LC(TAB)': '⌃↹'
    'LS(LC(TAB))': '⌃⇧↹'
#   zmk_combos:
#     combo_tog_nav_word: {'a': 'bottom', 'o': -0.25}
#     combo_tog_num_word: {'a': 'bottom', 'o': 0.0}
#     combo_return: {'a': 'bottom', 'o': 0.3}
#     combo_capsword: {'k': "Caps\nWord"}
